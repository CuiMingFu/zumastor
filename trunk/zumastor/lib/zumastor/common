# Zumastor Linux Storage Server
# Copyright (c) 2006 Google Inc.
# Author: Daniel Phillips <phillips@google.com>
# Licensed under the GNU GPL version 2

function find_in {
	local -r item=$1
	local -ra array=(${@:2})

	for memb in ${array[@]}; do
		if [ X$memb = X$item ]; then
			return 0
		fi
	done

	return 1
}

function verify_volname {
	local -r vol=$1

	# allow anything of nonzero length made of printable characters except slashes
	[ $vol ] || return 1
	echo "$vol" | grep -E '([^[:print:]]|/)' > /dev/null && return 1

	return 0
}

function volume_name {
	local -r vol=$1
	local -r id=$2

	if [ X$id = X-1 ]; then
		echo $vol
	else
		echo $vol\($id\)
	fi
}

function start_volume {
	local -r vol=$1
	local -r info=$VOLUMES/$vol
	local -r sdev=$info/device/snapstore
	local -r odev=$info/device/origin
	local -r agent=/var/run/zumastor/agents/$vol
	local -r server=/var/run/zumastor/servers/$vol
	local -r agentlog=/var/log/zumastor/${vol}-agent.log
	local -r serverlog=/var/log/zumastor/${vol}-server.log

	mkfifo $agent || return 1
	mkfifo $server || return 1
	ddsnap agent -l $agentlog $agent || return 1
	ddsnap server -l $serverlog $sdev $odev $agent $server || return 1
}

function stop_volume {
	local -r vol=$1
	local -r info=$VOLUMES/$vol
	local -r sdev=$info/device/snapstore
	local -r odev=$info/device/origin
	local -r agent=/var/run/zumastor/agents/$vol
	local -r server=/var/run/zumastor/servers/$vol
	local -r agentlog=/var/log/zumastor/${vol}-agent.log
	local -r serverlog=/var/log/zumastor/${vol}-server.log

	pkill -f "ddsnap server -l $serverlog $sdev $odev $agent $server"
	pkill -f "ddsnap agent -l $agentlog $agent"
	rm $agent $server
}

function create_device {
	local -r vol=$1
	local -r id=$2
	local -r info=$VOLUMES/$vol
	local -r agent=/etc/zumastor/agents/$vol
	local -r server=/etc/zumastor/servers/$vol
	local -r size=$(ddsnap status $server --size) || return 1
	local -r sdev=$info/device/snapstore
	local -r odev=$info/device/origin
	local -r name=$(volume_name $vol $id)
	local -r mount=/var/run/zumastor/mount/$name

	echo 0 $size ddsnap $sdev $odev $agent $id | dmsetup create $name || return 1
	test -d $mount || mkdir $mount || return 1
	mount -o ro /dev/mapper/$name $mount || { echo "unable to mount $mount"; return 1; }
}

function remove_device {
	local -r vol=$1
	local -r id=$2
	local -r name=$(volume_name $vol $id)
	local -r mount=/var/run/zumastor/mount/$name

	umount $mount
	rmdir $mount
	dmsetup remove $name || return 1
}
