#!/bin/bash
# Zumastor Linux Storage Server
# Copyright (c) 2006 Google Inc.
# Author: Daniel Phillips <phillips@google.com>
# Licensed under the GNU GPL version 2

declare -r VOLUMES=/var/lib/zumastor/volumes
declare -r RUNPATH=/var/run/zumastor
declare -r LOGS=/var/log/zumastor
declare -r RUNFILE=$RUNPATH/running
declare -r CONFIG=/etc/zumastor

# these can be modified here
# may read from a config file in the future
declare -r AGENTS=$RUNPATH/agents
declare -r SERVERS=$RUNPATH/servers
declare -r MOUNTS=$RUNPATH/mount
declare -r CRONS=$RUNPATH/cron
declare -r DEFAULT_PORT=$(cat $CONFIG/defaultport)
declare -r SSH_COMMAND=$(cat $CONFIG/ssh_command)

declare -ar KINDS=(hourly daily weekly monthly)

function find_in {
	[ $# -ge 1 ] || { echo "$0: too few arguments ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r item=$1
	local -ra array=(${@:2})

	for memb in ${array[@]}; do
		if [ X$memb = X$item ]; then
			return 0
		fi
	done

	return 1
}

function verify_valid_volname {
	[ $# -eq 1 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r vol=$1

	# allow anything of nonzero length made of printable characters except slashes or spaces
	[[ $vol ]] || return 1
	echo "$vol" | grep -E '([^[:print:]]|/| )' >/dev/null && return 1

	return 0
}

function verify_valid_device {
	[ $# -eq 1 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r dev=$1

	# allow anything made of printable characters starting with a slash
	[[ $dev ]] || return 1
	echo "$dev" | grep -E '(^[^/]|[^[:print:]])' >/dev/null && return 1

	return 0
}

function verify_valid_host {
	[ $# -eq 1 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r host=$1

	# allow anything of nonzero length made of printable characters except
	# slashes or spaces, or more than one colon
	[[ $host ]] || return 1
	echo "$host" | grep -E '([^[:print:]]|/| |:.*:)' >/dev/null && return 1

	return 0
}

function verify_valid_number {
	[ $# -eq 1 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r num=$1

	# allow only strings of digits 
	[[ $num ]] || return 1
	echo "$num" | grep -E '[^0-9]' >/dev/null && return 1

	return 0
}

function verify_managed_vol {
	[ $# -eq 1 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r vol=$1

	# make sure the name is non-empty, doesn't have slashes, etc.,
	# then make sure that name is in the database
	verify_valid_volname $vol || return 1
	[ -d $VOLUMES/$vol ] && return 0

	return 1
}

function verify_existing_target {
	[ $# -eq 2 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r vol=$1
	local -r host=$2
	local -r fifo=$VOLUMES/$vol/targets/$host/trigger

	verify_managed_vol $vol || return 1
	verify_valid_host $host || return 1
	[ -r $fifo ] && [ -p $fifo ] && return 0;

	return 1
}

function verify_existing_snap {
	[ $# -eq 2 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r vol=$1
	local -r snap=$2
	local -r sock=${SERVERS}/$vol

	verify_managed_vol $vol || return 1
	verify_valid_number $snap || return 1
	ddsnap status $sock $snap 2>/dev/null | grep -E "^ *$snap " >/dev/null && return 0

	return 1
}

function volume_name {
	[ $# -eq 2 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r vol=$1
	local -r id=$2

	if [[ $id = -1 ]]; then
		echo $vol
	else
		echo $vol\($id\)
	fi
}

function start_volume {
	[ $# -eq 1 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r vol=$1
	local -r info=$VOLUMES/$vol
	local -r sdev=$info/device/snapstore
	local -r odev=$info/device/origin
	local -r agent=${AGENTS}/$vol
	local -r server=${SERVERS}/$vol
	local -r agentlog=${LOGS}/${vol}-agent.log
	local -r serverlog=${LOGS}/${vol}-server.log

	ddsnap agent -l $agentlog $agent || return 1
	ddsnap server -l $serverlog $sdev $odev $agent $server || return 1
}

function stop_volume {
	[ $# -eq 1 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r vol=$1
	local -r info=$VOLUMES/$vol
	local -r sdev=$info/device/snapstore
	local -r odev=$info/device/origin
	local -r agent=${AGENTS}/$vol
	local -r server=${SERVERS}/$vol
	local -r agentlog=${LOGS}/${vol}-agent.log
	local -r serverlog=${LOGS}/${vol}-server.log

	pkill -f "ddsnap server -l $serverlog $sdev $odev $agent $server"
	pkill -f "ddsnap agent -l $agentlog $agent"
	rm $agent $server
}

# create_device <vol> <id>
# Given a volume <vol> and snapshot id <id>, create a new snapshot and device
# mapper entry for snapshot device.  If id -1 is provided, skip ddsnap create
function create_device {
	[ $# -eq 2 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r vol=$1
	local -r id=$2
	local -r info=$VOLUMES/$vol
	local -r agent=${AGENTS}/$vol
	local -r server=${SERVERS}/$vol
	local -r size=$(ddsnap status $server --size) || return 1
	local -r sdev=$info/device/snapstore
	local -r odev=$info/device/origin
	local -r name=$(volume_name $vol $id)

	# FIXME TODO: input checking

	# only create snapshot for non-origin
	if [[ $id -ne -1 ]]; then
		sync
		ddsnap create $server $id || return 1
	fi

	echo 0 $size ddsnap $sdev $odev $agent $id | dmsetup create $name || return 1
}

# mount_device <vol> <id>
# Given a volume <vol> and snapshot id <id>, mount the device
function mount_device {
	[ $# -eq 2 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r vol=$1
	local -r id=$2
	local -r name=$(volume_name $vol $id)
	local -r mount=${MOUNTS}/$name

	test -d $mount || mkdir $mount || return 1
	mount -o ro /dev/mapper/$name $mount || { echo "unable to mount $mount"; return 1; }
}

function umount_device {
	[ $# -eq 2 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r vol=$1
	local -r id=$2
	local -r name=$(volume_name $vol $id)
	local -r mount=${MOUNTS}/$name

	umount $mount
	rmdir $mount
}

function remove_device {
	[ $# -eq 2 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r vol=$1
	local -r id=$2
	local -r name=$(volume_name $vol $id)
	local -r mount=${MOUNTS}/$name

	dmsetup remove $name || return 1
}

# get_manged_snapshots <volume name>
#   Outputs a list of snapshot numbers manged by zumastor for the given volume
#   This is useful to iterate over rather than (ddsnap status --list)
#   Called from zumastor init script.
function get_managed_snapshots {
	[ $# -eq 1 ] || { echo "$0: wrong argument count ($#: $@) in call: ${FUNCNAME[@]}"; exit 1; }
	local -r vol=$1
	local kind
	local snappath
	local snapshots

	# !!! FIXME TODO: add hold/send
	for kind in ${KINDS[@]}; do
		snappath=$VOLUMES/$vol/master/snapshots/$kind
		if [ -e $snappath ]; then
			cat $snappath # !!! find a better way
		fi
	done

	for snappath in $VOLUMES/$vol/targets/*/{hold,send}; do
		cat $snappath # !!! find a better way
	done

	echo 
}
