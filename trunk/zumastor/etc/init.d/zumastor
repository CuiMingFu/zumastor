#!/bin/bash
# Zumastor Linux Storage Server
# Copyright (c) 2006 Google Inc.
# Author: Daniel Phillips <phillips@google.com>
# Licensed under the GNU GPL version 2

. /lib/lsb/init-functions || { echo "$0: unable to load LSB init functions"; exit 1; }
. /lib/zumastor/common || { echo "$0: unable to load common zumastor functions"; exit 1; }
. /lib/zumastor/ddfake

function start_zumastor {
	echo Starting zumastor
	local vol
	local id
	local host
	local log

	# setup directory structure
	if ! [ -d $RUNPATH ]; then
		mkdir -p $AGENTS || return 1
		mkdir -p $SERVERS || return 1
		mkdir -p $CRONS || return 1
		mkdir -p $MOUNTS || return 1
	fi

	touch_atomic $RUNFILE || { echo "$RUNFILE exists, is zumastor already running?"; exit 1; }

	for vol in $(ls $VOLUMES); do
		log=$LOGS/$vol/start.log
		log "starting volume '$vol'" $log
		echo "Starting volume '$vol'"
		start_volume $vol >> $log || return 1
		create_device $vol -1 || return 1
		local list=$(get_managed_snapshots $vol) || return 1
		for id in $list; do
			create_device $vol $id >> $log 2>&1
		done

		list=$(cat $VOLUMES/$vol/master/snapshots/* 2>/dev/null)
		for id in $list; do
			log "Mounting snapshot '$vol($id)'" $log
			mount_device $vol $id >> $log 2>&1
		done

		if [ -x $VOLUMES/$vol/master ]; then
			echo "Starting master"
			zumastor start master $vol || return 1
		else
			# start the nag daemon
			if [ -x $VOLUMES/$vol/source ]; then
				echo "Starting source"
				zumastor start source $vol
			else
				echo "info: orphan volume '$vol' is neither master nor slave"
			fi
		fi

		for host in $(ls $VOLUMES/$vol/targets); do
			echo "Starting target for '$vol' on '$host'"
			zumastor start target $vol $host
		done

	done
}

function stop_zumastor {
	echo Stopping zumastor
	local vol
	local id
	local host
	local log

	for vol in $(ls $VOLUMES); do
		log=$LOGS/$vol/stop.log
		log "stopping volume $vol" $log
		for host in $(ls $VOLUMES/$vol/targets); do
			zumastor stop target $vol $host
		done
		[ -x $VOLUMES/$vol/master ] && zumastor stop master $vol
		[ -x $VOLUMES/$vol/source ] && zumastor stop source $vol

		list=$(cat $VOLUMES/$vol/master/snapshots/* 2>/dev/null)
		for id in $list; do
			log "unmounting snapshot '$vol($id)'" $log
			umount_device $vol $id >> $log 2>&1
		done

		for id in $(ddsnap status ${SERVERS}/$vol --list); do
			remove_device $vol $id >> $log 2>&1
		done
		umount_device $vol -1 >> $log 2>&1
		# FIXME error out if this fails so we don't kill the agent and need to reboot
		remove_device $vol -1 >> $log 2>&1  || { echo remove origin device failed, aborting zumastor stop; exit 1; }

		stop_volume $vol
	done
}

[ -d $VOLUMES ] || { echo "$0: cannot find zumastor database in '$VOLUMES'"; exit 1; }

case $1 in
start)
	start_zumastor
	;;

stop)
	touch_atomic $STOPFILE || { echo "$STOPFILE exists, shutdown in progress?"; exit 1; }
	stop_zumastor
	rm $RUNFILE 2>/dev/null
	rm $STOPFILE
	exit 0

	;;

restart|force-reload)
	stop_zumastor
	start_zumastor
	;;
status)
	if [ -e $RUNFILE ]; then
		echo zumastor is running
		echo "use 'zumastor status' for more info..."
	else
		echo zumastor is NOT running
	fi
	exit 0
	;;
*)
	echo "Usage: $0 {start|stop|restart|force-reload}"
	exit 2
	;;
esac
