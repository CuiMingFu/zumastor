DDSNAP(8)                                           MAINTENTANCE COMMANDS                                           DDSNAP(8)

NAME
    ddsnap snapshots a block device and replicates the data on another block device. It is assumed that the user has access to hardware capable of holding multiple simultaneous snapshots efficiently.
    ddsnap can also general a list of snapshot "chunks" containing the differences between two snapshots; and can send those chunks across a network. On the target server, ddsnap writes the updated data to a block device.
    ddsnap provides some useful low-level flexibility. The user can set it to run daemonized or in the foreground; can set the desired journal size to use when creating the snapshot, and can set the desired block size on the target block device.

SYNOPSIS
    ddsnap [-V|--version] [-?|--help] [--usage] subcommand [option...] [operand...]

    ddsnap initialize [-y|--yes] [-j|--journal_size desired_journal_size] [-b|--block_size desired_block_size] <dev/snapshot> <dev/origin> [dev/meta]
    ddsnap agent [-f|--foreground] [-l|--logfile string] [-p|--pidfile string] <agent_socket>
    ddsnap server [-f|--foreground] [-l|--logfile string] [-p|--pidfile string] <dev/snapshot> <dev/origin> [dev/meta] <agent_socket> <server_socket>
    ddsnap create <sockname> <snapshot>
    ddsnap delete <sockname> <snapshot>
    ddsnap list <sockname>
    ddsnap priority <sockname> <snap_tag> <new_priority_value>
    ddsnap usecount <sockname> <snap_tag> <inc|dec>
    ddsnap status [-v|--verbose] <sockname> [<snapshot>]
    ddsnap delta changelist <sockname> <changelist> <snapshot1> <snapshot2>
    ddsnap delta create [-x|--xdelta] [-r|--raw] [-t|--test] [-o|--optcomp] [-g|--gzip compression_level] <changelist> <deltafile> <snapshot1> <snapshot2>
    ddsnap delta apply <deltafile> <dev>
    ddsnap delta send [-x|--xdelta] [-r|--raw] [-t|--test] [-o|--optcomp] [-g|--gzip compression_level] <sockname> <snapshot1> <snapshot2> <snapdev1> <snapdev2> <remsnapshot> <host>[:<port>]
    ddsnap delta listen [-f|--foreground] [-l|--logfile string] [-p|--pidfile string] <snapdevstem> [<host>[:<port>]]

DESCRIPTION
    ddsnap provides block device replication given a block level snapshot facility capable of holding multiple simultaneous snapshots efficiently. ddsnap can generate a list of snapshot chunks that differ between two snapshots, then send that difference over the wire. On a downstream server, write the updated data to a snapshotted block device.

OPTIONS
    -y, --yes
	Answer yes to all prompts.

    -j STRING, --journal_size=STRING
        User can specify their preferred journal size, i.e. 200k. Defaults to 400k.

    -b STRING, --block_size=STRING
        User can specify their preferred block size. Input has to be a power of two, i.e. 8k.  Defaults to chunk_size.

    -f, --foreground
        Sets the server to run in the foreground.  The default is to run daemonized.

    -l STRING, --logfile=STRING
	Specifies the preferred log file.

    -p STRING, --pidfile=STRING
	Specifies the preferred process id file.

    -v, --verbose
	Gives lots of information about what's happening.

    -x, --xdelta
        Generates a delta file containing only xdelta in chunk level.  The blockwise delta is compressed by taking a binary difference between source and destination chunks and compressing the result via xdelta algorithm.
   
    -r, --raw
        Generates a delta file containing raw chunks from snapshot2.
   
    -t, --test
        Generates a delta file containing xdelta in chunk level, raw chunk from snapshot1 and raw chunk from snapshot2.

    -o, --optcomp
        Generates a delta file with the most optimal compression. For any given chunk, the -o option compares the xdelta and gzipped (at level 9) compression of the chunk against the gzipped (at level 9) compression of the chunk and writes the smaller one into the delta file.  The -o mode is the slowest of all the modes.  Using the -o option nullifies any value specified by the -g option.  Whenever -o is used, gzip compression is automatically maximized to 9.

    -g INT, --gzip=INT
        Generates a delta file with user specified mode and then further compress the delta file with gzip at the user specified gzip compression level (an int between 0 to 9). Level 0 indicates no compression and level 9 indicates maximum compression. Defaults at level 6.

    -V, --version
	Shows version.

    -?, --help
        Prints a short help message and exits.
   
    --usage
        prints a short usage message and exits.

COMMANDS
    initialize [-y|--yes] [-j|--journal_size desired_journal_size] [-b|--block_size desired_block_size] <dev/snapshot> <dev/origin> [dev/meta]
        Initialize snapshot storage device.

    agent [-f|--foreground] [-l|--logfile string] [-p|--pidfile string] <agent_socket>
	Start the snapshot agent.

    server [-f|--foreground] [-l|--logfile string] [-p|--pidfile string] <dev/snapshot> <dev/origin> [dev/meta] <agent_socket> <server_socket>
        Start the snapshot server.

    create <sockname> <snapshot>
   	Create a snapshot with the given sockname and snapshot.

    delete <sockname> <snapshot>
	Delete a snapshot with the given sockname and snapshot.

    list <sockname>
   	Return list of snapshots currently held.

    priority <sockname> <snap_tag> <new_priority_value>
    	Sets the priority of the snapshot with the given sockname and snap_tag to the given priority_value.

    usecount <sockname> <snap_tag> <inc|dec>
      	Change the use count of the snapshot with the given sockname and snap_tag.

    status [-v|--verbose] <sockname> [<snapshot>]
	Report snapshot usage statistics.

    delta changelist <sockname> <changelist> <snapshot1> <snapshot2>
      	Create a changelist from snapshot1 and snapshot2 with the given changelist name.

    delta create [-x|--xdelta] [-r|--raw] [-t|--test] [-o|--optcomp] [-g|--gzip compression_level] <changelist> <deltafile> <snapshot1> <snapshot2>
      	Create a deltafile from the given changelist and the two given snapshots with the given deltafile name. Defaults to xdelta mode if no option was selected.

    delta apply <deltafile> <dev>
      	Apply the deltafile to the given device.

    delta send [-x|--xdelta] [-r|--raw] [-t|--test] [-o|--optcomp] [-g|--gzip compression_level] <sockname> <snapshot1> <snapshot2> <snapdev1> <snapdev2> <remsnapshot> <host>[:<port>]
       	Send a delta file to a downstream server.

    delta listen [-f|--foreground] [-l|--logfile string] [-p|--pidfile string] <snapdevstem> [<host>[:<port>]]
    	Listen for a delta arriving from upstream.

EXAMPLES
    # Initializing snapshot storage device
    sudo ./ddsnap initialize /dev/test-snapstore /dev/test-origin

    # Start up the agent server
    sudo ./ddsnap agent /tmp/control

    # Start up the snapshot server
    sudo ./ddsnap server /dev/test-snapstore /dev/test-origin /tmp/control /tmp/server   

    # Creating a snapshot
    sudo ./ddsnap create /tmp/server 0

    # Creating a changelist named changelist0-1 given /tmp/server and two snapshots (0 and 1)
    sudo ./ddsnap delta changelist /tmp/server changelist0-1 0 1

    # Creating a deltafile named deltafile0-1 based on changelist0-1, /dev/mapper/snapshot0 and /dev/mapper/snapshot1
    sudo ./ddsnap delta create -r changelist0-1 deltafile0-1 /dev/mapper/snapshot0 /dev/mapper/snapshot1

    # Applying a deltafile name deltafile0-1 to a device named /dev/mapper/vol
    sudo ./ddsnap delta apply /path/to/deltafile0-1 /dev/mapper/vol

TERMINOLOGY
    snapshot - a virtually instant copy of a defined collection of data created at a particular instant in time.

    origin volume - One of two block devices underlying a virtual snapshot device.  This volume is mapped one-to-one to a snapshot origin virtual device.  The virtual device could be removed and the underlying origin volume accessed directly, at the risk of losing the integrity of any snapshots sharing data with the origin.

    snapshot store - The other block device underlying a virtual snapshot device.  This volume contains data chunks that were copied from the origin in order to preserve the integrity of snapshot data, or were written directly to the snapshot store via a snapshot virtual device.  It also contains all metadata required to keep track of which snapshot store chunks belong to which snapshots.

    chunk - a user-definable binary multiple of 4K block size.

    exception - a chunk of data in the snapshot store, belonging to one or more snapshots.

SEE ALSO
    ddraid(8), ddraidd(8), ddraid.agent(8), dmsetup(8)
    zumastor project page: http://code.google.com/p/zumastor/

BUGS
           Please report bugs at http://code.google.com/p/zumastor or mail them to zumastor@googlegroups.com.

VERSION
           This man page is current for version 0.2 of ddsnap.

AUTHORS
    	   Man page written by Jane Chiu.  Original ddsnap snapshots coded by Daniel Phillips.  Remote replication originally coded by Jane Chiu and Robert Nelson.  Additional coding by Ross Combs.

CREDITS
           ddsnap is distributed under the GNU public license, version 2.  See the file COPYING for details.

    This program uses zlib compression library and popt library.  Many people sent patches, lent machines, gave advice and were generally helpful.

THANKS
          Thanks to Google, Red Hat and Sistina Software for supporting this work.  Special thanks to: Mike Todd, Joseph Dries, Douglas Merril and Matthew O'Keefe.

	  The home page of ddsnap is http://code.google.com/p/zumastor.  This site may cover questions unanswered by this manual page.
    Mailing lists for support and development are available at zumastor@googlegroups.com
