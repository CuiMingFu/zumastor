A few main points:

  * We historically built the user space code right in the kernel tree,
    though now svn idiosyncrasies pretty much force us to build externally,
    which may be a good thing.  It does mean we need to watch closely for
    protocol skew.  Time to start thinking about protocol stability I
    suppose.

  * Regression tests are in the main makefile.  This is kind of nice for
    running tests but we should really put them in their own makefile in
    the tests subdirectory.

  * For now, the tests in the main makefile are what passes for usage
    documentation.  Getting all the daemons started in the right order
    is kind of tricky, the Makefile shows you how to do it.  What we really
    need to do is make this less tricky, we are working on it.

  * Check the project wiki for up to date usage information.  Oh wait, there
    is no project wiki yet, sorry about that.  Maybe join the hotcakes irc
    channel instead:

       /server irc.oftc.net
       /join #hotcakes

  * Email us and volunteer to help with things!  Our gmail names are on the
    main project page -- daniel

Check out our sources (if you haven't already!):

  - svn checkout http://hotcakes.googlecode.com/svn/trunk/ hotcakes

  - The rest of this document will be from the root ./hotcakes/hotcakes/

Set up Linux 2.6:

  - Get a 2.6.7 or older kernel.org tree, it already has device mapper

  - Apply the ddsnap-2.6.XX patch.  From the root of the 2.6 tree:

      patch -p1 < /path/to/hotcakes/patches/ddsnap-2.6.XX

  - Make sure that device mapper and the dm_dd* are selected to be installed 
    as modules.

      Location:
        -> Device Drivers
          -> Multi-device support (RAID and LVM)
            -> Multiple devices driver support (RAID and LVM) (MD [=y]) 
              -> Device mapper support (BLK_DEV_DM [=m])

  - Rebuild the kernel on your test machine, install and reboot

Build the dd-tools:

  - Before you build, check the Makefile to make sure that the 'kernel' line 
    at the location of the Linux md drivers

      ex: kernel=/usr/src/linux-2.6/drivers/md

  - Now it is time to build!

      make

Testing ddsnap:

  - In order to get started you will need two block devices. 

  - Find dd-init in the Makefile and update it so it will correctly link 
    /dev/test-snapstore and /dev/test-origin to the two block devices.

       ex: change /dev/sda8 and /dev/sda7 to be your devices

           dd-init: 
                   ln -s /dev/sda8 /dev/test-snapstore || true
                   ln -s /dev/sda7 /dev/test-origin || true

  - The following command will setup the symlinks, load modules,  and get you
    ready to start the ddsnap-agent and ddsnapd server.

	make dd-init

  - Now, we must start the ddsnap-agent.  This command will continue to run
    in the foreground for the duration of this test.

        make dd-agent

  - Next, we start the ddsnapd server.  This command will continue to run
    in the foreground for the duration of this test.

        make dd-server

  - At this point you should see some debug messages, but everything should 
    appear to be happy.  Now that we have the server up it is time to create 
    the logical volume for the origin.

        make origin

  - And viola! You should have /dev/mapper/vol to use as a test volume.
    Time to put a filesystem on there.

       mkfs.ext3 /dev/mapper/vol # ext3, but you can use any filesystem

    You should now be able to use /dev/mapper/vol just like any other
    partition.

  - Time to actually use it.  We will create a test snapshot.

       ./ddsnap create-snapshot /tmp/server 0 

       echo 0 29302496 ddsnap /dev/test-snapstore /dev/test-origin \
          /tmp/control 0 | sudo dmsetup create snapshot0

    Note: 29302496 is the apparent size of the snapshot: the same size as the
    origin.  It can be derived by taking the number of blocks from
    /proc/partitions and multiplying by two.  For example, if your origin
    device is named sda7, you can use this to derive the number:

       echo $((2 * `grep sda7 /proc/partitions | awk '{print $3'}`))

    There should now be a /dev/mapper/snapshot0 device that reflects the newly 
    made snapshot. 

  - In order for snapshots to be helpful, we have to change the disk in some
    way.  Write a few files to disk or use the devspam utility included with
    this distribution to add some random data to the device.

  - Create another snapshot!

       ./ddsnap create-snapshot /tmp/server 1

       echo 0 29302496 ddsnap /dev/test-snapstore /dev/test-origin \
          /tmp/control 1 | sudo dmsetup create snapshot1

  - To create a delta, we will first create a changelist for the snapshots.

       ./ddsnap generate-changelist /tmp/server changelist0-1 0 1

    There should now be a file called changelist0-1 in your working directory.

  - Next, create the delta file using the changelist.

       ./ddsnap create-delta -r -n changelist0-1 deltafile0-1 \ 
            /dev/mapper/snapshot0 /dev/mapper/snapshot1

    There should now be a file called deltafile0-1 in your working directory.

