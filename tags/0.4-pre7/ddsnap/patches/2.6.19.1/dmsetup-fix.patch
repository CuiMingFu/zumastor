--- linux-2.6.19.1-zuma/drivers/md/dm-ddsnap.c	2007-03-23 12:05:11.000000000 -0700
+++ linux-2.6.19.1/drivers/md/dm-ddsnap.c	2007-03-23 10:07:53.000000000 -0700
@@ -184,6 +184,7 @@ struct devinfo {
 	struct semaphore exit1_sem;
 	struct semaphore exit2_sem;
 	struct semaphore exit3_sem;
+	struct semaphore identify_sem;
 	struct list_head pending[NUM_BUCKETS];
 	struct list_head queries;
 	struct list_head releases;
@@ -613,6 +614,7 @@ connect:
 			up(&info->server_out_sem);
 			if (outbead(info->control_socket, CONNECT_SERVER_OK, struct { }) < 0)
 				warn("unable to send CONNECT_SERVER_OK message to agent");
+			up(&info->identify_sem);
 			continue;
 			
 		case IDENTIFY_ERROR:
@@ -632,6 +634,7 @@ connect:
 				warn("can't send out err");
 			if (writepipe(info->control_socket, err_msg, length) < 0)
 				warn("unable to send message CONNECT_SERVER_ERROR to agent");
+			up(&info->identify_sem);
 			continue;
 			
 		case PROTOCOL_ERROR:
@@ -1297,6 +1300,7 @@ static int ddsnap_create(struct dm_targe
 	sema_init(&info->exit2_sem, 1);
 	sema_init(&info->exit3_sem, 1);
 	sema_init(&info->more_work_sem, 0);
+	sema_init(&info->identify_sem, 0);
 	spin_lock_init(&info->pending_lock);
 	spin_lock_init(&info->end_io_lock);
 	INIT_LIST_HEAD(&info->queries);
@@ -1339,6 +1343,14 @@ static int ddsnap_create(struct dm_targe
 		goto eek;
 	warn("Created snapshot device snapstore=%s origin=%s socket=%s snapshot=%i", argv[0], argv[1], argv[2], snap);
 	ddsnap_add_proc(argv[3], target); // use snapshot number as file name
+	while (down_interruptible(&info->identify_sem))
+		;
+	if (!(info->flags & READY_FLAG)) {
+			warn("snapshot device %d failed to be identified", info->snap);
+			error = "Can't identify snapshot";
+			err = -EINVAL;
+			goto eek;
+	}
 	return 0;
 
 eek:	warn("Virtual device create error %i: %s!", err, error);
